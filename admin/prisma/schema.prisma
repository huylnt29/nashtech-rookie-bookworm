generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id            Int        @id @default(autoincrement())
  imageUrls     String[]
  name          String
  description   String?
  publishedYear Int
  publisherId   Int?
  categoryId    Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  state         State      @default(ACTIVE)
  authors       Author[]
  reviews       Review[]
  batchs        Batch[]
  publisher     Publisher? @relation(fields: [publisherId], references: [id])
  category      Category?  @relation(fields: [categoryId], references: [id])
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Batch {
  id              Int        @id @default(autoincrement())
  initialQuantity Int
  soldQuantity    Int        @default(0)
  originalPrice   Float
  price           Float
  bookId          Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  state           State      @default(ACTIVE)
  book            Book       @relation(fields: [bookId], references: [id])
  discounts       Discount[]
}

model Discount {
  id          Int      @id @default(autoincrement())
  minQuantity Int
  maxQuantity Int
  percentage  Decimal  @db.Decimal(3, 2)
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  batchs      Batch[]
}

model Order {
  id            Int         @id @default(autoincrement())
  customerId    Int
  totalQuantity Int
  totalPrice    Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  state         State       @default(ACTIVE)
  status        OrderStatus @default(PLACED)
  customer      Customer    @relation(fields: [customerId], references: [id])
  OrderLine     OrderLine[]
}

model OrderLine {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @default(ACTIVE)

  order Order @relation(fields: [orderId], references: [id])
}

model Customer {
  id       Int     @id @default(autoincrement())
  name     String
  phone    String
  address  String?
  city     String?
  district String?
  state    State   @default(ACTIVE)
  Order    Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  author    String?
  content   String?
  rating    Int?
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @default(ACTIVE)
  book      Book     @relation(fields: [bookId], references: [id])
}

enum OrderStatus {
  PLACED
  PROCESSED
  COMPLETED
  CANCELLED
}

enum State {
  ACTIVE
  INACTIVE
}
