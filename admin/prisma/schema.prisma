generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id                Int        @id @default(autoincrement())
  imageUrls         String[]
  name              String
  description       String?
  publishedYear     Int?
  publisherId       Int?
  categoryId        Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  totalSoldQuantity Int        @default(0)
  averageRating     Float      @default(0)
  status            BookStatus @default(DRAFT)
  state             State      @default(ACTIVE)
  authors           Author[]
  reviews           Review[]
  batches           Batch[]
  publisher         Publisher? @relation(fields: [publisherId], references: [id])
  category          Category?  @relation(fields: [categoryId], references: [id])
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Batch {
  id              Int      @id @default(autoincrement())
  index           Int      @default(-1)
  initialQuantity Int
  soldQuantity    Int      @default(0)
  originalPrice   Float
  price           Float
  bookId          Int
  discountId      Int?
  importedAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  state State @default(ACTIVE)

  book        Book         @relation(fields: [bookId], references: [id])
  discount    Discount?    @relation(fields: [discountId], references: [id])
  collections Collection[]
  orderLines  OrderLine[]
}

model Discount {
  id          Int      @id @default(autoincrement())
  minQuantity Int      @default(1)
  maxQuantity Int?
  percentage  Float
  startAt     DateTime
  endAt       DateTime
  isRecurring Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  state       State    @default(ACTIVE)
  batches     Batch[]
}

model Order {
  id            Int           @id @default(autoincrement())
  customerId    Int
  totalQuantity Int
  totalPrice    Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  state         State         @default(ACTIVE)
  status        OrderStatus   @default(PLACED)
  customer      Customer      @relation(fields: [customerId], references: [id])
  orderLines    OrderLine[]
  paymentMethod PaymentMethod @default(CASH)
}

model OrderLine {
  id        Int      @id @default(autoincrement())
  batchId   Int
  quantity  Int
  price     Float
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @default(ACTIVE)
  batch     Batch    @relation(fields: [batchId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Customer {
  id       Int     @id @default(autoincrement())
  name     String
  phone    String  @unique
  email    String? @unique
  address  String
  city     String?
  district String?
  state    State   @default(ACTIVE)
  orders   Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  author    String?
  content   String?
  rating    Int?
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @default(ACTIVE)
  book      Book     @relation(fields: [bookId], references: [id])
}

model Collection {
  id        Int                @id @default(autoincrement())
  code      String?            @unique
  name      String
  layout    CollectionLayout
  movement  CollectionMovement
  type      CollectionType
  expiredAt DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  state     State              @default(ACTIVE)
  batches   Batch[]
}

enum BookStatus {
  DRAFT
  PUBLISHED
}

enum OrderStatus {
  PLACED
  PROCESSED
  COMPLETED
  CANCELLED
}

enum CollectionMovement {
  MANUAL
  AUTO
}

enum CollectionLayout {
  GRID
  LIST
}

enum CollectionType {
  DEFAULT
  NORMAL
}

enum State {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  CASH
  ZALOPAY
  VNPAY
  MOMO
}
